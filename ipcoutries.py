#!/usr/bin/env python2.7

import csv
import gzip
import ipaddr
import os
import requests
import time
import zipfile

from collections import namedtuple
from optparse import OptionParser

__author__ = "Fred C - @0x9900 - http://github.com/0x9900"

__version__ = '0.1.2'

__decription__ = """Load the file `GeoIPCountryWhois` from MaxMind and split
this file into a zone file for each country containting all the country
IPv4 network."""


CACHE_TIME = 86400 * 15         # the file on maxmind is updated once a month.

DEFAULT_URL = ('http://geolite.maxmind.com/download/geoip/database/'
               'GeoIPCountryCSV.zip')

COPYRIGHT_INFO = """# Zone: .%s
# File generated by ipcoutries.py
# http://0x9900.com/
# This product includes GeoLite data created by MaxMind, available from
# http://www.MaxMind.com/
#
"""

CSV_FORMAT =  'start end int_start int_end code country'
class GeoRecord(namedtuple('GeoRecord', CSV_FORMAT)):
  """country IP range"""
  @property
  def networks(self):
    """Returns a list of networks for the address range"""
    _networks = ipaddr.summarize_address_range(ipaddr.IPAddress(self.start),
                                               ipaddr.IPAddress(self.end))
    return _networks

class ZoneFiles(object):
  """ZoneFile split a record into several files based on the key

  The ZoneFile.write() method get a GeoIP instance and save the
  network address into the zone file corresponding to that network.

  """

  def __init__(self, key="code", compress_target=False):
    self.open_fds = {}
    self.key = key
    self.gzip = compress_target

  def write(self, geoip):
    """Write the networks information into the zone file for that country"""

    key = getattr(geoip, self.key)
    key = key.lower()

    if key not in self.open_fds:
      if self.gzip:
        filename = '%s.zone.gz' % key
        self.open_fds[key] = gzip.open(filename, 'w')
      else:
        filename = '%s.zone' % key
        self.open_fds[key] = open(filename, 'w')
      self.open_fds[key].write(COPYRIGHT_INFO % key)
      print filename

    for network in geoip.networks:
      self.open_fds[key].write(str(network))
      self.open_fds[key].write('\n')

  def close(self):
    print 'Closing %s file descriptors' % len(self.open_fds)
    for fdesc in self.open_fds.values():
      fdesc.close()

  def __del__(self):
    self.close()

class GeoIP(object):
  """GeoIP read GeoIPCountryCSV from the `URL` and create a local cache.
  Read the country IPs informations from that cache and return a
  GeoRecord object.

  MaxMind, only update that file once a month.

  Example:
    >>> geoip = GeoIP(DEFAULT_URL)
    >>> for ips_info in geoip:
    >>>   print 'Country:', ips_info.country
    >>>   print 'Block starts at "%s" ends at: "%s"' % (ips_info.start,
                                                        ips_info.end)
    Country: Kazakhstan
    Block starts at "212.96.64.0" ends at: "212.96.95.255"
    Country: Russian Federation
    Block starts at "212.96.96.0" ends at: "212.96.127.255"
    Country: Germany
    Block starts at "212.96.128.0" ends at: "212.96.159.255"
    . . .

  """

  def __init__(self, url, cache_time=CACHE_TIME):
    """
    Args:
      url: MaxMind url of the GeoIPCountryCSV file
      cache_time: expiration time of the local cache (in seconds)
    """

    def download(url, filename):
      print 'Downloading:', url
      req = requests.get(url, stream=True)
      with open(filename, 'wb') as fdesc:
        for chunk in req.iter_content(chunk_size=4096):
          fdesc.write(chunk)

    self.filename = url.split('/')[-1]
    # if the local version is old download a new one
    try:
      fstat = os.stat(self.filename)
      if (fstat.st_mtime + cache_time) - time.time() < 0:
        raise OSError
    except OSError:
      download(url, self.filename)

    if not zipfile.is_zipfile(self.filename):
      raise ValueError('The downloaded file should be a zipfile')

    try:
      self.zip = zipfile.ZipFile(self.filename, 'r')
    except zipfile.BadZipfile as err:
      raise ValueError('Bad zipfile: %s' % err)

    try:
      fdesc = self.zip.open('GeoIPCountryWhois.csv')
    except KeyError:
      raise ValueError('GeoIPCountryWhois.csv not found in the zipfile')
    else:
      self.reader = csv.reader(fdesc, dialect='excel')

  def read(self):
    """Returns all list with all the GeoIPCountryWhois records"""
    return [GeoRecord(*r) for r in self.reader]

  def __enter__(self):
    return self

  def __exit__(self, _type, _value, _tb):
    self.zip.close()

  def __iter__(self):
    return self

  def next(self):
    return GeoRecord(*self.reader.next())

def main():
  """Split IP networks for each country store these networks into
  `<country code>.zone.gz` file.
  """
  usage = "usage: %prog [options] arg"
  parser = OptionParser(usage=usage, description=__decription__,
                        version=__version__)
  parser.add_option("-f", "--force", dest="force",
                    help="Force the reload of GeoIPCountryCSV")
  (options, args) = parser.parse_args()

  cache_time = 0 if options.force else CACHE_TIME
  geoip = GeoIP(DEFAULT_URL, cache_time)
  zone_files = ZoneFiles(compress_target=True)
  for record in geoip.read():
    zone_files.write(record)

if __name__ == '__main__':
  main()
