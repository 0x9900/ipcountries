#!/usr/bin/env python2.7
"""
This program downloads the GeoLite database and create country files
containing the IP Network for that country.
"""
import csv
import gzip
import logging
import os
import sqlite3
import zipfile

from datetime import datetime
from optparse import OptionParser

import requests

__author__ = "Fred C - @0x9900 - http://github.com/0x9900"

__version__ = '0.1.3'

__decription__ = """Load the file `GeoLite2-Country-CSV` from MaxMind and extract the
IP networks assigned for this country into a zone file."""


CACHE_TIME = 86400 * 15         # the file on maxmind is updated once a month.

DEFAULT_URL = ('https://geolite.maxmind.com/download/geoip/database/'
               'GeoLite2-Country-CSV.zip')

COPYRIGHT_INFO = """# Zone: .%s
# File generated by ipcountries.py
# http://0x9900.com/
# This product includes GeoLite data created by MaxMind, available from
# http://www.MaxMind.com/
#
"""

TEMP_DIR = '/tmp'
TARGET_DIR = '/tmp'

logging.basicConfig(format='%(asctime)s %(levelname)s: %(message)s',
                    datefmt='%H:%M:%S',
                    level=logging.INFO)

class MaxMind(object):
  """ Download the database from MaxMind and create a sqlite3 in memory database"""

  tables = {
    'locations': 'GeoLite2-Country-Locations-en.csv',
    'ipv4': 'GeoLite2-Country-Blocks-IPv4.csv',
    'ipv6': 'GeoLite2-Country-Blocks-IPv6.csv',
  }

  def __init__(self, url=DEFAULT_URL):
    self.sqldb = None
    self.url = url
    self.sqldb = sqlite3.connect(":memory:")
    self.sqldb.row_factory = sqlite3.Row

    self.filename = os.path.join(TEMP_DIR, url.split('/')[-1])
    self.zip_download()
    self.load_tables()

  def zip_download(self):
    if os.path.exists(self.filename):
      return
    logging.info('Downloading: %s', self.filename)
    req = requests.get(self.url, stream=True)
    with open(self.filename, 'wb') as fdesc:
      for chunk in req.iter_content(chunk_size=4096):
        fdesc.write(chunk)

  def getzip(self, filename):
    with zipfile.ZipFile(self.filename) as zipfd:
      try:
        fullname = [n for n in zipfd.namelist() if n.endswith(filename)][0]
      except IndexError:
        _msg = '%s: %s not found' % (self.filename, filename)
        logging.error(_msg)
        raise IOError(_msg)

      return zipfd.open(fullname)

  def load_tables(self):
    for table in ('locations', 'ipv4'): # 'ipv6'):
      logging.info("Downloading %s table", table)
      fdesc = csv.reader(self.getzip(self.tables[table]), delimiter=',')
      headers = fdesc.next()
      self.sqldb.execute('CREATE TABLE %s (%s)' % (table, ', '.join(headers)))
      self.sqldb.execute('CREATE INDEX %s_id ON %s(geoname_id)' % (table, table))
      insert_cmd = 'INSERT INTO %s VALUES(%s)' % (table, ', '.join(['?'] * len(headers)))
      for row in fdesc:
        self.sqldb.execute(insert_cmd, [unicode(f, 'utf8') for f in row])

  def get_country_id(self, iso_country):
    request = self.sqldb.execute(
      "SELECT geoname_id FROM locations WHERE country_iso_code == ?", (iso_country, )
    )
    return request.fetchone()[0]

  def country_info(self, country):
    field = 'geoname_id' if country.isdigit() else 'country_iso_code'
    sql = 'SELECT * FROM locations WHERE %s == ?' % field
    req = self.sqldb.execute(sql, (country,))
    return req.fetchone()

  def country_ip(self, table, country_id):
    table = table.lower()
    country_id = str(country_id)

    req = 'SELECT * FROM %s WHERE geoname_id == ?' % table
    curs = self.sqldb.cursor()
    curs.execute(req, (country_id,))
    for row in curs:
      yield row


def main():
  """.
  """
  usage = "usage: %prog [options] arg"
  parser = OptionParser(usage=usage, description=__decription__,
                        version=__version__)
  parser.add_option("-t", "--target", default=TEMP_DIR,
                    help="where the destination files will be stored")
  (options, args) = parser.parse_args()

  if not args:
    raise parser.error("Missing argument")

  maxmind = MaxMind()
  today = datetime.now().strftime('%c')
  for country_code in [a.upper() for a in args]:
    info = maxmind.country_info(country_code)
    logging.info('Generating %s %s', info['country_iso_code'], info['country_name'])
    fullname = os.path.join(options.target, "%s.zone.gz" % country_code.lower())
    with gzip.open(fullname, 'wb') as zfd:
      zfd.write('# File generated on: %s\n' % today)
      for key in sorted(info.keys()):
        zfd.write("# %s: %s\n" % (key, info[key]))
      zfd.write('#\n')
      for record in maxmind.country_ip('ipv4', info['geoname_id']):
        zfd.write(record['network'])
        zfd.write('\n')


if __name__ == '__main__':
  main()
